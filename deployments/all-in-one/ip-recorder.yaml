---
# Source: ip-recorder/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ip-recorder
  labels:
    helm.sh/chart: ip-recorder-v0.0.4
    app.kubernetes.io/name: ip-recorder
    app.kubernetes.io/instance: ip-recorder
    app.kubernetes.io/version: "v0.0.4"
    app.kubernetes.io/managed-by: Helm
---
# Source: ip-recorder/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ip-recorder
  labels:
    helm.sh/chart: ip-recorder-v0.0.4
    app.kubernetes.io/name: ip-recorder
    app.kubernetes.io/instance: ip-recorder
    app.kubernetes.io/version: "v0.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ip-recorder
    app.kubernetes.io/instance: ip-recorder
---
# Source: ip-recorder/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ip-recorder
  labels:
    helm.sh/chart: ip-recorder-v0.0.4
    app.kubernetes.io/name: ip-recorder
    app.kubernetes.io/instance: ip-recorder
    app.kubernetes.io/version: "v0.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ip-recorder
      app.kubernetes.io/instance: ip-recorder
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ip-recorder
        app.kubernetes.io/instance: ip-recorder
    spec:
      serviceAccountName: ip-recorder
      securityContext:
        {}
      containers:
        - name: ip-recorder
          securityContext:
            {}
          image: "217104054449.dkr.ecr.us-east-1.amazonaws.com/ip-recorder:v0.0.4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
            - name: PORT
              value: "8080"
            
            - name: DB_HOST
              value: ip-recorder-db.c4clkutr9ehs.us-east-1.rds.amazonaws.com
            - name: DB_PORT
              value: "3306"
            - name: DB_USER
              value: user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: db-password
            - name: DB_NAME
              value: ips
          resources:
            requests:
              cpu: 10m
              memory: 64Mi
---
# Source: ip-recorder/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ip-recorder
  labels:
    helm.sh/chart: ip-recorder-v0.0.4
    app.kubernetes.io/name: ip-recorder
    app.kubernetes.io/instance: ip-recorder
    app.kubernetes.io/version: "v0.0.4"
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: nginx
  rules:
    - host: "a7c6c27f744cb468aab5313fb5526d9d-21a087e4cffc01fb.elb.us-east-1.amazonaws.com"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: ip-recorder
                port:
                  number: 80
